#          DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#                  Version 2, December 2004
#
#          DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
# TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
#
# 0. You just DO WHAT THE FUCK YOU WANT TO.

Grammar:
	Version <- :"HTTP" :Slash ~(DIGIT+ '.' DIGIT+)

	RequestURI   <- '*' / AbsoluteURI / AbsolutePath / Authority
	AbsoluteURI  <~ TEXT+ '://' TEXT+
	AbsolutePath <~ '/' TEXT*
	Authority    <~ TEXT*

	ExtensionMethod <~ Token
	Method          <-
		"OPTIONS" /
		"GET" /
		"HEAD" /
		"POST" /
		"PUT" /
		"DELETE" /
		"TRACE" /
		"CONNECT" /
		ExtensionMethod

	ReasonPhrase  <~ (!(CR / LF) TEXT)*
	ExtensionCode <~ Digit Digit Digit
	StatusCode    <-
		"100" / # Continue
		"101" / # Switching Protocols
		"200" / # OK
		"201" / # Created
		"202" / # Accepted
		"203" / # Non-Authoritative Information
		"204" / # No Content
		"205" / # Reset Content
		"206" / # Partial Content
		"300" / # Multiple Choices
		"301" / # Moved Permanently
		"302" / # Found
		"303" / # See Other
		"304" / # Not Modified
		"305" / # Use Proxy
		"307" / # Temporary Redirect
		"400" / # Bad Request
		"401" / # Unauthorized
		"402" / # Payment Required
		"403" / # Forbidden
		"404" / # Not Found
		"405" / # Method Not Allowed
		"406" / # Not Acceptable
		"407" / # Proxy Authentication Required
		"408" / # Request Time-out
		"409" / # Conflict
		"410" / # Gone
		"411" / # Length Required
		"412" / # Precondition Failed
		"413" / # Request Entity Too Large
		"414" / # Request-URI Too Large
		"415" / # Unsupported Media Type
		"416" / # Requested range not satisfiable
		"417" / # Expectation Failed
		"500" / # Internal Server Error
		"501" / # Not Implemented
		"502" / # Bad Gateway
		"503" / # Service Unavailable
		"504" / # Gateway Time-out
		"505" / # HTTP Version not supported
		ExtensionCode

	StartLine   <- RequestLine / StatusLine
	RequestLine <- Method :SP RequestURI :SP Version :CRLF
	StatusLine  <- Version :SP StatusCode :SP ReasonPhrase :CRLF

	MessageHeader <- FieldName :':' :SP* FieldValue? :SP*
	FieldName     <~ Token
	FieldValue    <~ (LWS / TEXT)*

	# Basic Rules
	Token        <~ (!(CTL / Separators) CHAR)+
	Separators   <- '(' / ')' / '<' / '>' / '@' / ',' / ';' / ':' / '\\' / '[' / ']' / '?' / '=' / '{' / '}'
	Comment      <: '(' (CText / QuotedPair / Comment) ')'
	CText        <~ !('(' / ')') TEXT
	QuotedString <~ DoubleQuote (QDText / QuotedPair) DoubleQuote
	QDText       <~ !DoubleQuote TEXT
	QuotedPair   <~ BackSlash CHAR

	OCTET   <- .
	CHAR    <- [\x00-\x7f]
	UPALPHA <- [A-Z]
	LOALPHA <- [a-z]
	ALPHA   <- UPALPHA / LOALPHA
	DIGIT   <- [0-9]
	CTL     <- '[\x00-\x1f]'
	SP      <- ' '
	HT      <- '\x09'

	CRLF <~ CR LF
	LWS  <~ CRLF? (SP / HT)+
	TEXT <~ !CTL OCTET
	HEX  <~ [A-F] / [a-f] / DIGIT
